// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String     @id @default(uuid())
  clerkId      String     @unique
  firstName    String
  lastName     String
  username     String
  email        String
  profileImage String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  cars         Car[]
  favorites    Favorite[]
  reviews      Review[]
  bookings     Booking[]
}

model Car {
  id          String     @id @default(uuid())
  name        String
  tagline     String
  category    String
  images      String[]
  description String
  price       Int
  passengers  Int
  doors       Int
  amenities   String
  longitude   Float     
  latitude    Float      
  location    String    
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  userId      String
  favorites   Favorite[]
  reviews     Review[]
  bookings    Booking[]

}

model Favorite {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  userId    String
  car       Car @relation(fields: [carId], references: [id], onDelete: Cascade)
  carId     String

}

model Review {
  id          String   @id @default(uuid())
  user        User  @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  userId      String
  car         Car  @relation(fields: [carId], references: [id], onDelete: Cascade)
  carId       String
  rating      Int
  comment     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Booking {
  id          String   @id @default(uuid())
  user        User  @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  userId      String
  car         Car   @relation(fields: [carId], references: [id], onDelete: Cascade)
  carId       String
  orderTotal  Int
  totalDays   Int
  checkIn     DateTime
  checkOut    DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}